@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="hud-alive @(IsAlive() ? "" : "hidden")">
		<div class="score-container @(IsFlying() ? "" : "hidden")">
			<div class="score-box">
				<label class="score-number">@(GetBumps())</label>
				<label class="score-label">BUMPS</label>
			</div>
			<div class="score-box">
				<label class="score-number">@(GetSqueezes())</label>
				<label class="score-label">SQUEEZES</label>
			</div>
			<div class="score-box">
				<label class="score-number">@(GetScrapes())</label>
				<label class="score-label">SCRAPES</label>
			</div>
		</div>

		<div class="popup-stage @(ShowMessage() ? "" : "hidden")">
			<label class="score-label">@(ShowAttemptMessage() ? ("ATTEMPT # " + (GetDeaths() + GetWins() + 1)) :
				"STAGE COMPLETE")</label>
		</div>
	</div>
	<div class="hud-dead@((IsAlive() ? " hidden" : "") + (HasFinished() ? " winner" : " loser"))">
		<label class="small">ATTEMPT # @(GetWins() + GetDeaths())</label>
		<label class="rip">YOU HAVE @(HasFinished() ? "SURVIVED" : "PERISHED")</label>
		<label class="small">FOR THE @(Ordinate(HasFinished() ? GetWins() : GetDeaths())) TIME</label>
		<div class="score-tally">
			<label>SCRAPES: @(GetScrapes()) x1</label>
			<label>BUMPS: @(GetBumps()) x@(CareFall.SCORE_BUMP_AMT)</label>
			<label>SQUEEZES: @(GetSqueezes()) x@(CareFall.SCORE_SQUEEZE_AMT)</label>
			<label>STAGES: @(GetStages()) x@(CareFall.SCORE_STAGE_AMT)</label>
			<label>FINAL SCORE: @(GetScore())</label>
		</div>
		<label class="small">PRESS '@(restartAct?.KeyboardCode.ToUpper())' TO RESTART</label>
	</div>
</root>

@code
{
	private InputAction restartAct = Input.GetActions().FirstOrDefault(x => x.Name == "restart");

	public int GetScore()
	{
		return CareFall.Game.plr?.GetScore() ?? 0;
	}

	public int GetBumps()
	{
		return CareFall.Game.plr?.ScoreBumps ?? 0;
	}

	public int GetSqueezes()
	{
		return CareFall.Game.plr?.ScoreSqueezes ?? 0;
	}

	public int GetScrapes()
	{
		return (int)(CareFall.Game.plr?.ScoreScrapes ?? 0);
	}

	public int GetStages()
	{
		return CareFall.Game.plr?.ScoreStages ?? 0;
	}

	public bool IsAlive()
	{
		return CareFall.Game.plr?.Alive ?? false;
	}

	public bool IsFlying()
	{
		return CareFall.Game.plr?.Flying ?? false;
	}

	public bool HasFinished()
	{
		return CareFall.Game.plr?.FinishedRun ?? false;
	}

	public bool ShowAttemptMessage()
	{
		return CareFall.Game.plr?.JustBeganRun() ?? false;
	}

	public bool ShowStageMessage()
	{
		return GetStages() > 0 && CareFall.Game.plr?.LastStageCompletion < 2.5f;
	}

	public bool ShowMessage()
	{
		return ShowAttemptMessage() || ShowStageMessage();
	}

	public int GetDeaths()
	{
		return CareFall.Game.plr?.NumDeaths ?? 0;
	}

	public int GetWins()
	{
		return CareFall.Game.plr?.NumWins ?? 0;
	}

	public string Ordinate(int i)
	{
		var s = i.ToString();
		i %= 100;
		if (i >= 11 && i <= 13)
		{
			return s + "TH";
		}

		switch (i % 10)
		{
			case 1:
				return s + "ST";
			case 2:
				return s + "ND";
			case 3:
				return s + "RD";
			default:
				return s + "TH";
		}
	}

	protected override int BuildHash() => System.HashCode.Combine(
	GetBumps(),
	GetSqueezes(),
	GetScrapes(),
	GetStages(),
	ShowMessage(),
	IsAlive(),
	IsFlying()
	);
}
