@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
	<div class="hud-alive @(IsAlive() ? "" : "hidden")">
		<div class="score-container @(IsFlying() ? "hidden" : "")">
			<label class="score-hint">Get a BUMP for each new obstacle you get close to.</label>
			<label class="score-hint">Be fully &amp; tightly surrounded for a SQUEEZE.</label>
			<label class="score-hint">Continuously get SCRAPES by staying close to obstacles.</label>
		</div>
		<div class="score-container @(IsFlying() ? "" : "hidden")">
			<div class="score-box">
				<label class="score-number">@(GetBumps())</label>
				<label class="score-label">BUMPS</label>
			</div>
			<div class="score-box">
				<label class="score-number">@(GetSqueezes())</label>
				<label class="score-label">SQUEEZES</label>
			</div>
			<div class="score-box">
				<label class="score-number">@(GetScrapes())</label>
				<label class="score-label">SCRAPES</label>
			</div>
		</div>
	</div>
	<div class="hud-dead @(IsAlive() ? "hidden" : "")">
		<label class="rip">YOU HAVE PERISHED</label>
		<div class="score-tally">
			<label class="score-tuple">SCRAPES: @(GetScrapes()) x1</label>
			<label class="score-tuple">BUMPS: @(GetBumps()) x@(CareFall.SCORE_BUMP_AMT)</label>
			<label class="score-tuple">SQUEEZES: @(GetSqueezes()) x@(CareFall.SCORE_SQUEEZE_AMT)</label>
			<label class="score-tuple">FINAL SCORE: @(GetScore())</label>
			<label class="score-tuple"></label>
			<label class="score-tuple">PRESS '@(restartAct?.KeyboardCode.ToUpper())' TO RESTART</label>
		</div>
	</div>
</root>

@code
{
	private InputAction restartAct = Input.GetActions().FirstOrDefault(x => x.Name == "restart");

	public int GetScore()
	{
		return (CareFall.SCORE_SQUEEZE_AMT * GetSqueezes()) + (CareFall.SCORE_BUMP_AMT * GetBumps()) + GetScrapes();
	}

	public int GetBumps()
	{
		return CareFall.Game.plr?.ScoreBumps ?? 0;
	}

	public int GetSqueezes()
	{
		return CareFall.Game.plr?.ScoreSqueezes ?? 0;
	}

	public int GetScrapes()
	{
		return (int)(CareFall.Game.plr?.ScoreScrapes ?? 0);
	}

	public bool IsAlive()
	{
		return CareFall.Game.plr?.Alive ?? false;
	}

	public bool IsFlying()
	{
		return CareFall.Game.plr?.Flying ?? false;
	}

	protected override int BuildHash() => System.HashCode.Combine(GetBumps(), GetSqueezes(), GetScrapes(), IsAlive(),
	IsFlying());
}
